#!/usr/bin/env python3
"""Merge tool for multiple JSON files generated by weather_jma.py"""
# Soomin K. Dec.23,2018
# <F9> to run this python file in vim editor (need to set :nnoremap)
# Repo: https://github.com/soominkimu/csv2json

import json
import os
import glob     # Unix style pathname pattern expansion

import util.c2j_util as cj
import util.print_color as pc   ## replace with print_no_color if you don't need a colorful report

########################### INPUT OPTIONS
SOURCE_LOCATIONS = ['tokyo']
SOURCE_ITEMS     = ['c', \
                    'Max', 'Min', 'Avg', 'Ran', \
                    'SlT', 'SlE', 'Snw', 'Wnd', 'Hmd', 'Cld']
##                    'StD', 'StN']
###########################

class JsonFile:
    """List of JSON files to be merged"""
    json_list = []

    def __init__(self, fn_pattern):
        try:
            self.json_list = glob.glob(fn_pattern)
        except FileNotFoundError:
            cj.handleFileNotFoundError(fn_pattern)
        self.json_list.sort()

def merge_json(src_loc, src_item):
    """merge json files with the specified source location and item"""
    FILES_TO_MERGE = cj.PathName.json        + src_loc + '-' + src_item + '-*.json'
    FILE_MERGED    = cj.PathName.json + 'M_' + src_loc + '-' + src_item + '.json'
    ## N.B. The resulting merged file should not fall into the same filename pattern!
    print(cj.Deco.line_top)
    print('Merging JSON files:', \
          pc.CYELLOW,            FILES_TO_MERGE, pc.CEND, '=>', \
          pc.CBLACK+pc.CGREENBG, FILE_MERGED,    pc.CEND)
    print(cj.Deco.line_bot)
    JF = JsonFile(FILES_TO_MERGE)  #### Specify the filename pattern of the files to merge

    def print_statistics(head, data):
        if src_item != 'c':
            v_min, v_max, v_avg = cj.get_statistics(data)
            print(pc.CGREY + head + pc.CEND, \
                  pc.CYELLOW, v_min, pc.CGREY + '~' + pc.CEND, \
                  pc.CBLUE,   v_max, \
                  pc.CGREEN,  v_avg, pc.CEND)
        else:
            print('')

    ## string type is immutable
    j_dict_data = []
    files_count = 0
    for fn in JF.json_list:
        with open(fn) as jf:
            j_dict = json.load(jf)    # dict object, data['data'] is a list
            j_d_m  = j_dict['meta']
            if files_count == 0:
                m_loc  = j_d_m['location']
                m_from = j_d_m['from']
            m_to   = j_d_m['to']
            m_item = j_d_m['item']
            j_dict_data += j_dict['data']
            files_count += 1
            print(cj.Deco.yearIcon, files_count, \
                  j_d_m['location'], j_d_m['from'], '~', j_d_m['to'], \
                  pc.CGREY, j_d_m['item'], pc.CEND, end='')
            print_statistics(':', j_dict['data'])

    lines_total = len(j_dict_data)
    print(pc.CGREY, cj.Deco.line_bot, pc.CEND)
    print(cj.Deco.colIcon, lines_total, 'lines of data', end='')
    print_statistics(' ==============>', j_dict_data)

    str_data = json.dumps(j_dict_data, separators=(',', ':'))

    with open(FILE_MERGED, 'w') as f:
        f.write(cj.json_meta_obj(m_loc, m_from, m_to, m_item))
        f.write(cj.json_data_obj(str_data))

    sz_json = os.path.getsize(FILE_MERGED)
    print(cj.Deco.rowIcon, FILES_TO_MERGE, '(', files_count, 'files) merged into =>', \
          FILE_MERGED, '(', pc.CYELLOW, cj.file_size(sz_json), pc.CEND, ')')

    ## Verify the validity of the generated JSON file
    with open(FILE_MERGED) as jf:
        j_dict = json.load(jf)
        print(cj.Deco.totalHead, 'meta:', j_dict['meta'])
        if lines_total == len(j_dict['data']):
            print(cj.Deco.success, 'JSON check ok!')
        else:
            print(cj.Deco.warning, len(j_dict['data']), 'lines generated, check error!')

###################### Main
for loc in SOURCE_LOCATIONS:
    for it in SOURCE_ITEMS:
        merge_json(loc, it)

